import Arithmetization.ISigmaOne.Metamath.Term
import Arithmetization.Definability.Absoluteness

noncomputable section

namespace LO.FirstOrder

variable {M : Type*} [Zero M] [One M] [Add M] [Mul M] [LT M] [M ‚äß‚Çò* ùêàùö∫‚ÇÅ]

namespace Arith.Model

def finArrowToSeq : {k : ‚Ñï} ‚Üí (Fin k ‚Üí M) ‚Üí M
  | 0,     _ => ‚àÖ
  | k + 1, v => finArrowToSeq (k := k) (fun i ‚Ü¶ v i) ‚ÅÄ' (v k)

@[simp] lemma finArrowToSeq_nil : finArrowToSeq (![] : Fin 0 ‚Üí M) = ‚àÖ := rfl

@[simp] lemma finArrowToSeq_singleton (a : M) : finArrowToSeq ![a] = !‚ü®a‚ü© := rfl

@[simp] lemma finArrowToSeq_doubleton (a b : M) : finArrowToSeq ![a, b] = !‚ü®a, b‚ü© := rfl

@[simp] lemma finArrowToSeq_cons (v : Fin k ‚Üí M) (a : M) :
    finArrowToSeq (v <: a) = finArrowToSeq v ‚ÅÄ' a  := by simp [finArrowToSeq]

lemma nat_cast_empty : ((‚àÖ : ‚Ñï) : M) = ‚àÖ := rfl

lemma finArrowToSeq_absolute (v : Fin k ‚Üí ‚Ñï) : ((finArrowToSeq v : ‚Ñï) : M) = finArrowToSeq fun i ‚Ü¶ (v i : M) := by
  induction' k with k ih
  ¬∑ simp [finArrowToSeq, nat_cast_empty]
  ¬∑ simp [finArrowToSeq, ih, seqCons_absolute]

end Arith.Model

namespace Semiterm

open Arith Model

variable {L : Language} [(k : ‚Ñï) ‚Üí Encodable (L.Func k)] [(k : ‚Ñï) ‚Üí Encodable (L.Rel k)]
  [DefinableLanguage L] [DefinableLanguage.T L ‚âº ùêèùêÄ‚Åª]

def codeInModel {n} : SyntacticSemiterm L n ‚Üí M
  | #z                    => ^#z
  | &x                    => ^&x
  | func (arity := k) f v => ^func (k : M) (Encodable.encode f) (finArrowToSeq fun i ‚Ü¶ (v i).codeInModel)

end Semiterm

end LO.FirstOrder

end
