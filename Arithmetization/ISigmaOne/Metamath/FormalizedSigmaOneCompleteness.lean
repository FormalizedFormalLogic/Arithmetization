import Arithmetization.ISigmaOne.Metamath.Proof.R
import Arithmetization.ISigmaOne.Metamath.Coding

/-!

# Formalized $\Sigma_1$-Completeness

-/

namespace LO.FirstOrder.Rew

variable {L : Language}

abbrev emb‚Çô {o : Type v‚ÇÅ} [IsEmpty o] {n} : Rew L o n ‚Ñï n := emb

lemma emb_comp_bShift_comm {o : Type v‚ÇÅ} [IsEmpty o] :
    Rew.bShift.comp (Rew.emb : Rew L o n Œæ n) = Rew.emb.comp Rew.bShift := by
  ext x; simp [comp_app]
  exact IsEmpty.elim (by assumption) x

lemma emb_bShift_term {o : Type v‚ÇÅ} [IsEmpty o] (t : Semiterm L o n) :
    Rew.bShift (Rew.emb t : Semiterm L Œæ n) = Rew.emb (Rew.bShift t) := by
  simp [‚Üêcomp_app, emb_comp_bShift_comm]

end LO.FirstOrder.Rew

noncomputable section

open Classical

namespace LO.Arith

open FirstOrder FirstOrder.Arith

variable {V : Type*} [Zero V] [One V] [Add V] [Mul V] [LT V] [V ‚äß‚Çò* ùêàùö∫‚ÇÅ]

variable {L : Arith.Language V} {pL : LDef} [Arith.Language.Defined L pL]

namespace Formalized

variable {T : LOR.Theory V} {pT : (Language.lDef ‚Ñí‚Çí·µ£).TDef} [T.Defined pT] [EQTheory T] [R‚ÇÄTheory T]

def toNumVec {n} (e : Fin n ‚Üí V) : (Language.codeIn ‚Ñí‚Çí·µ£ V).TSemitermVec n 0 :=
  ‚ü®‚åúfun i ‚Ü¶ numeral (e i)‚åù, by simp, by
    intro i hi
    rcases eq_fin_of_lt_nat hi with ‚ü®i, rfl‚ü©
    simp [quote_nth_fin (fun i ‚Ü¶ numeral (e i)) i]‚ü©

@[simp] lemma toNumVec_nth {n} (e : Fin n ‚Üí V) (i : Fin n) : (toNumVec e).nth i = ‚Üë(e i) := by ext; simp [toNumVec]

@[simp] lemma toNumVec_val_nth {n} (e : Fin n ‚Üí V) (i : Fin n) : (toNumVec e).val.[i] = numeral (e i) := by simp [toNumVec]

/-- TODO: move-/
@[simp] lemma coe_coe_lt {n} (i : Fin n) : (i : V) < (n : V) :=
  calc (i : V) < (i : V) + (n - i : V) := by simp
  _  = (n : V) := by simp

@[simp] lemma cast_substs_numVec (p : Semisentence ‚Ñí‚Çí·µ£ (n + 1)) :
    ((.cast (V := V) (n := ‚Üë(n + 1)) (n' := ‚Üën + 1) ‚åúRew.emb‚Çô.hom p‚åù (by simp)) ^/[(toNumVec e).q.substs (typedNumeral 0 x).sing]) =
    ‚åúRew.emb‚Çô.hom p‚åù ^/[toNumVec (x :> e)] := by
  have : (toNumVec e).q.substs (typedNumeral 0 x).sing = x ‚à∑·µó toNumVec e := by
    ext; simp
    apply nth_ext' ((‚Üën : V) + 1)
      (by rw [len_termSubstVec]; simpa using (toNumVec e).prop.qVec)
      (by simp [‚Üê(toNumVec e).prop.1])
    intro i hi
    rw [nth_termSubstVec (by simpa using (toNumVec e).prop.qVec) hi]
    rcases zero_or_succ i with (rfl | ‚ü®i, rfl‚ü©)
    ¬∑ simp [Language.qVec]
    ¬∑ simp only [Language.qVec, nth_cons_succ, Language.TSemitermVec.prop]
      rcases eq_fin_of_lt_nat (by simpa using hi) with ‚ü®i, rfl‚ü©
      rw [nth_termBShiftVec (by simp)]
      simp; exact coe_coe_lt (V := V) i
  rw [this]
  ext; simp [toNumVec]


namespace TProof

open Language.Theory.TProof System

variable (T)

noncomputable def termEqComplete {n : ‚Ñï} (e : Fin n ‚Üí V) :
    (t : Semiterm ‚Ñí‚Çí·µ£ Empty n) ‚Üí T ‚ä¢ ‚åúRew.emb‚Çô t‚åù^·µó/[toNumVec e] =' ‚Üë(t.valbm V e)
  | #z                                 => by simpa using eqRefl T (e z)
  | &x                                 => Empty.elim x
  | Semiterm.func Language.Zero.zero v => by simpa using eqRefl T _
  | Semiterm.func Language.One.one v   => by simpa using eqRefl T _
  | Semiterm.func Language.Add.add v   => by
      simp [Rew.func, Semiterm.val_func]
      have ih : T ‚ä¢ (‚åúRew.emb‚Çô (v 0)‚åù^·µó/[toNumVec e] + ‚åúRew.emb‚Çô (v 1)‚åù^·µó/[toNumVec e]) =' (‚Üë((v 0).valbm V e) + ‚Üë((v 1).valbm V e)) :=
        addExt T _ _ _ _ ‚®Ä termEqComplete e (v 0) ‚®Ä termEqComplete e (v 1)
      have : T ‚ä¢ (‚Üë((v 0).valbm V e) + ‚Üë((v 1).valbm V e)) =' ‚Üë((v 0).valbm V e + (v 1).valbm V e) := addComplete T _ _
      exact eqTrans T _ _ _ ‚®Ä ih ‚®Ä this
  | Semiterm.func Language.Mul.mul v   => by
      simp [Rew.func, Semiterm.val_func]
      have ih : T ‚ä¢ (‚åúRew.emb‚Çô (v 0)‚åù^·µó/[toNumVec e] * ‚åúRew.emb‚Çô (v 1)‚åù^·µó/[toNumVec e]) =' (‚Üë((v 0).valbm V e) * ‚Üë((v 1).valbm V e)) :=
        mulExt T _ _ _ _ ‚®Ä termEqComplete e (v 0) ‚®Ä termEqComplete e (v 1)
      have : T ‚ä¢ (‚Üë((v 0).valbm V e) * ‚Üë((v 1).valbm V e)) =' ‚Üë((v 0).valbm V e * (v 1).valbm V e) := mulComplete T _ _
      exact eqTrans T _ _ _ ‚®Ä ih ‚®Ä this

lemma termEq_complete! {n : ‚Ñï} (e : Fin n ‚Üí V) (t : Semiterm ‚Ñí‚Çí·µ£ Empty n) :
    T ‚ä¢! ‚åúRew.emb‚Çô t‚åù^·µó/[toNumVec e] =' ‚Üë(t.valbm V e) := ‚ü®termEqComplete T e t‚ü©

open FirstOrder.Arith

theorem boldSigma‚ÇÅComplete : ‚àÄ {n} {œÉ : Semisentence ‚Ñí‚Çí·µ£ n},
    Hierarchy ùö∫ 1 œÉ ‚Üí ‚àÄ {e}, Semiformula.Evalbm V e œÉ ‚Üí T ‚ä¢! ‚åúRew.emb‚Çô.hom œÉ‚åù^/[toNumVec e]
  | _, _, Hierarchy.verum _ _ _,               _, h => by simp only [LogicalConnective.HomClass.map_top,
    Semiformula.codeIn'_verum, Language.TSemiformula.substs_verum, Language.TSemiformula.neg_verum,
    Language.TSemiformula.neg_falsum, verum!, dne'!]
  | _, _, Hierarchy.falsum _ _ _,              _, h => by sorry
  | _, _, Hierarchy.rel _ _ Language.Eq.eq v,  e, h => by sorry
  | _, _, Hierarchy.nrel _ _ Language.Eq.eq v, e, h => by sorry
  | _, _, Hierarchy.rel _ _ Language.LT.lt v,  e, h => by sorry
  | _, _, Hierarchy.nrel _ _ Language.LT.lt v, e, h => by sorry
  | _, _, Hierarchy.and (p := p) (q := q) hp hq,                 e, h => by
    have h : Semiformula.Evalbm V e p ‚àß Semiformula.Evalbm V e q := by simpa using h
    simpa using and_intro! (boldSigma‚ÇÅComplete hp h.1) (boldSigma‚ÇÅComplete hq h.2)
  | _, _, Hierarchy.or (p := p) (q := q) hp hq,                  e, h => by
    have : Semiformula.Evalbm V e p ‚à® Semiformula.Evalbm V e q := by simpa using h
    rcases this with (h | h)
    ¬∑ simpa using or‚ÇÅ'! (boldSigma‚ÇÅComplete hp h)
    ¬∑ simpa using or‚ÇÇ'! (boldSigma‚ÇÅComplete hq h)
  | _, _, Hierarchy.ball (p := p) pt hp,                e, h => by
    rcases Rew.positive_iff.mp pt with ‚ü®t, rfl‚ü©
    simp only [Rew.ball, Rew.q_emb, Rew.hom_finitary2, Rew.emb_bvar, ‚Üê Rew.emb_bShift_term,
      Semiformula.codeIn'_ball, substs_ball]
    apply ball_replace! T _ _ _ ‚®Ä (eq_symm! T _ _ ‚®Ä termEq_complete! T e t) ‚®Ä ?_
    apply ball_intro!
    intro x hx
    suffices T ‚ä¢! ‚åúRew.emb‚Çô.hom p‚åù^/[toNumVec (x :> e)]  by
      simpa [Language.TSemifromula.substs_substs]
    have : Semiformula.Evalbm V (x :> e) p := by
      simp at h; exact h x hx
    exact boldSigma‚ÇÅComplete hp this
  | _, _, Hierarchy.bex (p := p) (t := t) pt hp,                 e, h => by
    rcases Rew.positive_iff.mp pt with ‚ü®t, rfl‚ü©
    simp only [Rew.bex, Rew.q_emb, Rew.hom_finitary2, Rew.emb_bvar, ‚Üê Rew.emb_bShift_term,
      Semiformula.codeIn'_bex, substs_bex]
    apply bex_replace! T _ _ _ ‚®Ä (eq_symm! T _ _ ‚®Ä termEq_complete! T e t) ‚®Ä ?_
    have : ‚àÉ x < t.valbm V e, Semiformula.Evalbm V (x :> e) p := by simpa using h
    rcases this with ‚ü®x, hx, Hx‚ü©
    apply bex_intro! T _ _ hx
    simpa [Language.TSemifromula.substs_substs] using boldSigma‚ÇÅComplete hp Hx
  | _, _, Hierarchy.sigma (p := p) hp,         e, h => by
    have hp : Hierarchy ùö∫ 1 p := hp.accum _
    simp only [Rew.ex, Rew.q_emb, Semiformula.codeIn'_ex, Language.TSemiformula.substs_ex]
    have : ‚àÉ x, Semiformula.Evalbm V (x :> e) p := by simpa using h
    rcases this with ‚ü®x, hx‚ü©
    apply ex! x
    simpa [Language.TSemifromula.substs_substs] using boldSigma‚ÇÅComplete hp hx
  | _, _, Hierarchy.ex (p := p) hp,                     e, h => by
    simp only [Rew.ex, Rew.q_emb, Semiformula.codeIn'_ex, Language.TSemiformula.substs_ex]
    have : ‚àÉ x, Semiformula.Evalbm V (x :> e) p := by simpa using h
    rcases this with ‚ü®x, hx‚ü©
    apply ex! x
    simpa [Language.TSemifromula.substs_substs] using boldSigma‚ÇÅComplete hp hx

end TProof

end Formalized

end LO.Arith

end
