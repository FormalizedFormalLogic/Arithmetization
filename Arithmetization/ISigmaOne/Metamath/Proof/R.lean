import Arithmetization.ISigmaOne.Metamath.Proof.Typed

/-!

# Formalized Theory $\mathsf{R_0}$

-/

noncomputable section

open Classical

namespace LO.Arith

open FirstOrder FirstOrder.Arith

variable {V : Type*} [Zero V] [One V] [Add V] [Mul V] [LT V] [V ‚äß‚Çò* ùêàùö∫‚ÇÅ]

variable {L : Arith.Language V} {pL : LDef} [Arith.Language.Defined L pL]

namespace Formalized

variable (V)

abbrev LOR.Theory := @Language.Theory V _ _ _ _ _ _ ‚åú‚Ñí‚Çí·µ£‚åù (Language.lDef ‚Ñí‚Çí·µ£) _

variable {V}

abbrev bv {n : V} (x : V) (h : x < n := by simp) : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiterm n := ‚åú‚Ñí‚Çí·µ£‚åù.bvar x h
abbrev fv {n : V} (x : V) : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiterm n := ‚åú‚Ñí‚Çí·µ£‚åù.fvar x

scoped prefix:max "#'" => bv
scoped prefix:max "&'" => fv

/-- TODO: move -/
@[simp] lemma two_lt_three : (2 : V) < (1 + 1 + 1 : V) := by simp [‚Üêone_add_one_eq_two]
@[simp] lemma two_lt_four : (2 : V) < (1 + 1 + 1 + 1 : V) := by simp [‚Üêone_add_one_eq_two]
@[simp] lemma three_lt_four : (3 : V) < (1 + 1 + 1 + 1 : V) := by simp [‚Üêtwo_add_one_eq_three, ‚Üêone_add_one_eq_two]
@[simp] lemma two_sub_one_eq_one : (2 : V) - 1 = 1 := by simp [‚Üêone_add_one_eq_two]
@[simp] lemma three_sub_one_eq_two : (3 : V) - 1 = 2 := by simp [‚Üêtwo_add_one_eq_three]

class EQTheory (T : LOR.Theory V) where
  refl : (#'0 =' #'0).all ‚àà' T
  symm : (#'1 =' #'0 ‚ü∂ #'0 =' #'1).all.all ‚àà' T
  trans : (#'2 =' #'1 ‚ü∂ #'1 =' #'0 ‚ü∂ #'2 =' #'0).all.all.all ‚àà' T
  replace (p : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiformula (0 + 1)) : (#'1 =' #'0 ‚ü∂ p^/[(#'1).sing] ‚ü∂ p^/[(#'0).sing]).all.all ‚àà' T

class R‚ÇÄTheory (T : LOR.Theory V) where
  add (n m : V) : (‚Üën + ‚Üëm) =' ‚Üë(n + m) ‚àà' T
  mul (n m : V) : (‚Üën * ‚Üëm) =' ‚Üë(n * m) ‚àà' T
  ne {n m : V} : n ‚â† m ‚Üí ‚Üën ‚â†' ‚Üëm ‚àà' T
  ltNumeral (n : V) : (#'0 <' ‚Üën ‚ü∑ (tSubstItr (#'0).sing (#'1 =' #'0) n).disj).all ‚àà' T

variable (T : LOR.Theory V) {pT : (Language.lDef ‚Ñí‚Çí·µ£).TDef} [T.Defined pT] [EQTheory T]

namespace TProof

open Language.Theory.TProof System System.FiniteContext

def eqRefl (t : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t =' t := by
  have : T ‚ä¢ (#'0 =' #'0).all := byAxm EQTheory.refl
  simpa [Language.TSemiformula.substs‚ÇÅ] using specialize this t

def eqSymm (t‚ÇÅ t‚ÇÇ : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ t‚ÇÇ =' t‚ÇÅ := by
  have : T ‚ä¢ (#'1 =' #'0 ‚ü∂ #'0 =' #'1).all.all := byAxm EQTheory.symm
  have := by simpa using specialize this t‚ÇÅ
  simpa [Language.TSemitermVec.q_of_pos, Language.TSemiformula.substs‚ÇÅ] using specialize this t‚ÇÇ

def eqTrans (t‚ÇÅ t‚ÇÇ t‚ÇÉ : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ t‚ÇÇ =' t‚ÇÉ ‚ü∂ t‚ÇÅ =' t‚ÇÉ := by
  have : T ‚ä¢ (#'2 =' #'1 ‚ü∂ #'1 =' #'0 ‚ü∂ #'2 =' #'0).all.all.all := byAxm EQTheory.trans
  have := by simpa using specialize this t‚ÇÅ
  have := by simpa using specialize this t‚ÇÇ
  simpa [Language.TSemitermVec.q_of_pos, Language.TSemiformula.substs‚ÇÅ] using specialize this t‚ÇÉ

noncomputable def replace (p : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiformula (0 + 1)) (t u : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) :
    T ‚ä¢ t =' u ‚ü∂ p^/[t.sing] ‚ü∂ p^/[u.sing] := by
  have : T ‚ä¢ (#'1 =' #'0 ‚ü∂ p^/[(#'1).sing] ‚ü∂ p^/[(#'0).sing]).all.all := byAxm <| EQTheory.replace p
  have := by simpa using specialize this t
  simpa [Language.TSemitermVec.q_of_pos, Language.TSemiformula.substs‚ÇÅ,
    Language.TSemifromula.substs_substs] using specialize this u

noncomputable def addExt (t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ u‚ÇÅ =' u‚ÇÇ ‚ü∂ (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÇ + u‚ÇÇ) := by
  apply deduct'
  apply deduct
  let Œì := [u‚ÇÅ =' u‚ÇÇ, t‚ÇÅ =' t‚ÇÇ]
  have bt : Œì ‚ä¢[T] t‚ÇÅ =' t‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have bu : Œì ‚ä¢[T] u‚ÇÅ =' u‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÅ + u‚ÇÅ) ‚ü∂ (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÇ + u‚ÇÅ) := by
    have := replace T ((t‚ÇÅ.bShift + u‚ÇÅ.bShift) =' (#'0 + u‚ÇÅ.bShift)) t‚ÇÅ t‚ÇÇ
    simpa using this
  have b : Œì ‚ä¢[T] (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÇ + u‚ÇÅ) := of (Œì := Œì) this ‚®Ä bt ‚®Ä of (eqRefl _ _)
  have : T ‚ä¢ u‚ÇÅ =' u‚ÇÇ ‚ü∂ (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÇ + u‚ÇÅ) ‚ü∂ (t‚ÇÅ + u‚ÇÅ) =' (t‚ÇÇ + u‚ÇÇ) := by
    have := replace T ((t‚ÇÅ.bShift + u‚ÇÅ.bShift) =' (t‚ÇÇ.bShift + #'0)) u‚ÇÅ u‚ÇÇ
    simpa using this
  exact of (Œì := Œì) this ‚®Ä bu ‚®Ä b

noncomputable def mulExt (t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ u‚ÇÅ =' u‚ÇÇ ‚ü∂ (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÇ * u‚ÇÇ) := by
  apply deduct'
  apply deduct
  let Œì := [u‚ÇÅ =' u‚ÇÇ, t‚ÇÅ =' t‚ÇÇ]
  have bt : Œì ‚ä¢[T] t‚ÇÅ =' t‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have bu : Œì ‚ä¢[T] u‚ÇÅ =' u‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÅ * u‚ÇÅ) ‚ü∂ (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÇ * u‚ÇÅ) := by
    have := replace T ((t‚ÇÅ.bShift * u‚ÇÅ.bShift) =' (#'0 * u‚ÇÅ.bShift)) t‚ÇÅ t‚ÇÇ
    simpa using this
  have b : Œì ‚ä¢[T] (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÇ * u‚ÇÅ) := of (Œì := Œì) this ‚®Ä bt ‚®Ä of (eqRefl _ _)
  have : T ‚ä¢ u‚ÇÅ =' u‚ÇÇ ‚ü∂ (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÇ * u‚ÇÅ) ‚ü∂ (t‚ÇÅ * u‚ÇÅ) =' (t‚ÇÇ * u‚ÇÇ) := by
    have := replace T ((t‚ÇÅ.bShift * u‚ÇÅ.bShift) =' (t‚ÇÇ.bShift * #'0)) u‚ÇÅ u‚ÇÇ
    simpa using this
  exact of (Œì := Œì) this ‚®Ä bu ‚®Ä b

noncomputable def ltExt (t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ u‚ÇÅ =' u‚ÇÇ ‚ü∂ t‚ÇÅ <' u‚ÇÅ ‚ü∂ t‚ÇÇ <' u‚ÇÇ := by
  apply deduct'
  apply deduct
  apply deduct
  let Œì := [t‚ÇÅ <' u‚ÇÅ, u‚ÇÅ =' u‚ÇÇ, t‚ÇÅ =' t‚ÇÇ]
  have bt : Œì ‚ä¢[T] t‚ÇÅ =' t‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have bu : Œì ‚ä¢[T] u‚ÇÅ =' u‚ÇÇ := FiniteContext.byAxm <| by simp [Œì]
  have bl : Œì ‚ä¢[T] t‚ÇÅ <' u‚ÇÅ := FiniteContext.byAxm <| by simp [Œì]
  have : T ‚ä¢ t‚ÇÅ =' t‚ÇÇ ‚ü∂ t‚ÇÅ <' u‚ÇÅ ‚ü∂ t‚ÇÇ <' u‚ÇÅ := by
    have := replace T (#'0 <' u‚ÇÅ.bShift) t‚ÇÅ t‚ÇÇ
    simpa using this
  have b : Œì ‚ä¢[T] t‚ÇÇ <' u‚ÇÅ := of (Œì := Œì) this ‚®Ä bt ‚®Ä bl
  have : T ‚ä¢ u‚ÇÅ =' u‚ÇÇ ‚ü∂ t‚ÇÇ <' u‚ÇÅ ‚ü∂ t‚ÇÇ <' u‚ÇÇ := by
    have := replace T (t‚ÇÇ.bShift <' #'0) u‚ÇÅ u‚ÇÇ
    simpa using this
  exact of (Œì := Œì) this ‚®Ä bu ‚®Ä b

/-
noncomputable def ballReplace (p : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiformula (0 + 1)) (t u : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) :
    T ‚ä¢ t =' u ‚ü∂ p.ball t ‚ü∂ p.ball u := by {
  have := replace T ((p^/[(#'0).sing]).ball #'0) t u
  simp [Language.TSemifromula.substs_substs] at this
  sorry}
-/

noncomputable def ballReplace (p : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiformula (0 + 1)) (t u : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) :
    T ‚ä¢ t =' u ‚ü∂ p.ball t ‚ü∂ p.ball u := by
  apply deduct'
  apply deduct
  simp only [Language.TSemiformula.ball_eq_imp]
  apply generalize
  simp [Language.TSemiformula.free, Language.TSemiformula.substs‚ÇÅ]
  apply deduct
  simp only [‚Üê Language.TSemiterm.bShift_shift_comm, Language.TSemiterm.bShift_substs_sing]
  let Œì := [&'0 <' u.shift, (#'0 <' t.shift.bShift ‚ü∂ p.shift).all, t.shift =' u.shift]
  have    : Œì ‚ä¢[T] (#'0 <' t.shift.bShift ‚ü∂ p.shift).all  := FiniteContext.byAxm <| by simp [Œì]
  have bp : Œì ‚ä¢[T] &'0 <' t.shift ‚ü∂ p.shift^/[(&'0).sing] := by simpa [Language.TSemiformula.substs‚ÇÅ] using specializeWithCtx this (&'0)
  have bu : Œì ‚ä¢[T] &'0 <' u.shift                         := FiniteContext.byAxm <| by simp [Œì]
  have    : Œì ‚ä¢[T] &'0 <' t.shift                         := by
    refine (of (Œì := Œì) <| ltExt T (&'0) (&'0) u.shift t.shift) ‚®Ä (of <| eqRefl T _) ‚®Ä ?_ ‚®Ä bu
    have e  : Œì ‚ä¢[T] t.shift =' u.shift := FiniteContext.byAxm <| by simp [Œì]
    exact (of (Œì := Œì) <| eqSymm T t.shift u.shift) ‚®Ä e
  exact bp ‚®Ä this

variable [R‚ÇÄTheory T]

def addComplete (n m : V) : T ‚ä¢ (‚Üën + ‚Üëm) =' ‚Üë(n + m) := byAxm (R‚ÇÄTheory.add n m)

def mulComplete (n m : V) : T ‚ä¢ (‚Üën * ‚Üëm) =' ‚Üë(n * m) := byAxm (R‚ÇÄTheory.mul n m)

def neComplete {n m : V} (h : n ‚â† m) : T ‚ä¢ ‚Üën ‚â†' ‚Üëm := byAxm (R‚ÇÄTheory.ne h)

def ltNumeral (t : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) (n : V) : T ‚ä¢ t <' ‚Üën ‚ü∑ (tSubstItr t.sing (#'1 =' #'0) n).disj := by
  have : T ‚ä¢ (#'0 <' ‚Üën ‚ü∑ (tSubstItr (#'0).sing (#'1 =' #'0) n).disj).all := byAxm (R‚ÇÄTheory.ltNumeral n)
  simpa [Language.TSemitermVec.q_of_pos, Language.TSemiformula.substs‚ÇÅ] using specialize this t

noncomputable def nltNumeral (t : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm) (n : V) : T ‚ä¢ t <Ã∏' ‚Üën ‚ü∑ (tSubstItr t.sing (#'1 ‚â†' #'0) n).conj := by
  simpa using negReplaceIff' <| ltNumeral T t n

def ltComplete {n m : V} (h : n < m) : T ‚ä¢ ‚Üën <' ‚Üëm := by
  have : T ‚ä¢ ‚Üën <' ‚Üëm ‚ü∑ _ := ltNumeral T n m
  apply andRight this ‚®Ä ?_
  apply disj (i := m - (n + 1)) _ (by simpa using sub_succ_lt_self (by simp [h]))
  simpa [nth_tSubstItr', h] using eqRefl T ‚Üën

noncomputable def nltComplete {n m : V} (h : m ‚â§ n) : T ‚ä¢ ‚Üën <Ã∏' ‚Üëm := by
  have : T ‚ä¢ ‚Üën <Ã∏' ‚Üëm ‚ü∑ (tSubstItr (‚Üën : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm).sing (#'1 ‚â†' #'0) m).conj := by
    simpa using negReplaceIff' <| ltNumeral T n m
  refine andRight this ‚®Ä ?_
  apply conj'
  intro i hi
  have hi : i < m := by simpa using hi
  have : n ‚â† i := Ne.symm <| ne_of_lt <| lt_of_lt_of_le hi h
  simpa [nth_tSubstItr', hi] using neComplete T this

noncomputable def ballIntro (p : ‚åú‚Ñí‚Çí·µ£‚åù.TSemiformula (0 + 1)) (n : V)
    (bs : ‚àÄ i < n, T ‚ä¢ p ^/[(i : ‚åú‚Ñí‚Çí·µ£‚åù.TTerm).sing]) :
    T ‚ä¢ p.ball ‚Üën := by {
  apply all
  suffices T ‚ä¢ &'0 <Ã∏' ‚Üën ‚ãé p.shift^/[(&'0).sing] by
    simpa [Language.TSemiformula.free, Language.TSemiformula.substs‚ÇÅ]
  have : T ‚ä¢ (tSubstItr (&'0).sing (#'1 ‚â†' #'0) n).conj ‚ãé p.shift^/[(&'0).sing] := by {
    apply conjOr'
    intro i hi
    have hi : i < n := by simpa using hi
    suffices T ‚ä¢ &'0 =' ‚Üëi ‚ü∂ p.shift^/[(&'0).sing] by
      simpa [nth_tSubstItr', hi, Language.TSemiformula.imp_def] using this
    apply deduct'
    sorry
  }
  exact orReplaceLeft' this (andRight (nltNumeral T (&'0) n))
}

end TProof

end Formalized

end LO.Arith

end
