import Arithmetization.Definability.BooleanSystem.Basic

namespace LO.Arith

open FirstOrder

variable {V : Type*} [Zero V] [One V] [Add V] [Mul V] [LT V] [V ‚äß‚Çò* ùêèùêÄ‚Åª]

def Open.Lightface : BooleanSystem V where
  VecPr {k} (R) := Definable ‚Ñí‚Çí·µ£ Semiformula.Open R
  verum {k} := ‚ü®‚ä§, by simp, by intro v; simp‚ü©
  and {k P Q} := by
    rintro ‚ü®p, hp, hP‚ü©; rintro ‚ü®q, hq, hQ‚ü©
    refine ‚ü®p ‚ãè q, by simp [hp, hq], by intro v; simp [hP v, hQ v]‚ü©
  not {k P} := by
    rintro ‚ü®p, hp, hP‚ü©
    exact ‚ü®~p, by simp [hp], by intro v; simp [hP v]‚ü©
  equal := ‚ü®‚Äúx y | x = y‚Äù, by simp, by intro v; simp‚ü©
  replace {k l P} := by
    rintro ‚ü®p, hp, hP‚ü© f
    refine ‚ü®Rew.substs (fun x ‚Ü¶ #(f x)) |>.hom p, by simp [hp], by intro v; simp [hP.iff]‚ü©

def Open.Boldface : BooleanSystem V where
  VecPr {k} (R) := DefinableWithParam ‚Ñí‚Çí·µ£ Semiformula.Open R
  verum {k} := ‚ü®‚ä§, by simp, by intro v; simp‚ü©
  and {k P Q} := by
    rintro ‚ü®p, hp, hP‚ü©; rintro ‚ü®q, hq, hQ‚ü©
    refine ‚ü®p ‚ãè q, by simp [hp, hq], by intro v; simp [hP v, hQ v]‚ü©
  not {k P} := by
    rintro ‚ü®p, hp, hP‚ü©
    exact ‚ü®~p, by simp [hp], by intro v; simp [hP v]‚ü©
  equal := ‚ü®‚Äúx y | x = y‚Äù, by simp, by intro v; simp‚ü©
  replace {k l P} := by
    rintro ‚ü®p, hp, hP‚ü© f
    refine ‚ü®Rew.substs (fun x ‚Ü¶ #(f x)) |>.hom p, by simp [hp], by intro v; simp [hP.iff]‚ü©

namespace LO.Arith
