import Arithmetization.Exponential.PPow2
import Mathlib.Tactic.Linarith

namespace LO.FirstOrder

attribute [simp] Semiformula.eval_substs Matrix.vecHead Matrix.vecTail Matrix.comp_vecCons' Matrix.constant_eq_singleton

namespace Arith

noncomputable section

variable {M : Type} [Inhabited M] [DecidableEq M] [ORingSymbol M]
  [Structure ‚Ñí‚Çí·µ£ M] [Structure.ORing ‚Ñí‚Çí·µ£ M]
  [ùêèùêÄ‚Åª.Mod M]

namespace Model

section ISigma‚ÇÄ

variable [ùêàùö∫‚ÇÄ.Mod M]

def ext (u z : M) : M := z /‚Çë u mod u

lemma ext_graph (a b c : M) : a = ext b c ‚Üî ‚àÉ x ‚â§ c, x = c /‚Çë b ‚àß a = x mod b := by
  simp [ext]; constructor
  ¬∑ rintro rfl; exact ‚ü®c /‚Çë b, by simp, rfl, by rfl‚ü©
  ¬∑ rintro ‚ü®_, _, rfl, rfl‚ü©; simp

def extdef : Œ£·¥¨[0] 3 :=
  ‚ü®‚Äú‚àÉ[#0 < #3 + 1] (!edivdef [#0, #3, #2] ‚àß !remdef [#1, #0, #2])‚Äù, by simp‚ü©

lemma ext_defined : Œ£·¥¨[0]-Function‚ÇÇ (Œª a b : M ‚Ü¶ ext a b) extdef := by
  intro v; simp [Matrix.vecHead, Matrix.vecTail, extdef,
    ext_graph, Semiformula.eval_substs, ediv_defined.pval, rem_defined.pval, le_iff_lt_succ]

@[simp] lemma ext_le_add (u z : M) : ext u z ‚â§ z :=
  le_trans (remainder_le (z /‚Çë u) u) (by simp [add_comm])

@[simp] lemma ext_lt {u} (z : M) (pos : 0 < u) : ext u z < u := by simp [ext, pos]

lemma ext_add_of_dvd_sq_right {u z‚ÇÅ z‚ÇÇ : M} (pos : 0 < u) (h : u^2 ‚à£ z‚ÇÇ) : ext u (z‚ÇÅ + z‚ÇÇ) = ext u z‚ÇÅ := by
  simp [ext]
  have : ‚àÉ z', z‚ÇÇ = z' * u * u := by rcases h with ‚ü®u', rfl‚ü©; exact ‚ü®u', by simp [mul_comm _ u', mul_assoc]; simp [sq]‚ü©
  rcases this with ‚ü®z‚ÇÇ, rfl‚ü©
  simp [ediv_add_mul_self, pos]

lemma ext_add_of_dvd_sq_left {u z‚ÇÅ z‚ÇÇ : M} (pos : 0 < u) (h : u^2 ‚à£ z‚ÇÅ) : ext u (z‚ÇÅ + z‚ÇÇ) = ext u z‚ÇÇ := by
  rw [add_comm]; exact ext_add_of_dvd_sq_right pos h

lemma ext_rem {i j z : M} (ppi : PPow2 i) (ppj : PPow2 j) (hij : i < j) : ext i (z mod j) = ext i z := by
  have := ediv_add_remainder z j
  have : i^2 ‚à£ j := ppi.pow2.sq.dvd_of_le ppj.pow2 (PPow2.sq_le_of_lt ppi ppj hij)
  calc
    ext i (z mod j) = ext i (j * (z /‚Çë j) + (z mod j)) := by symm; exact ext_add_of_dvd_sq_left ppi.pos (Dvd.dvd.mul_right this (z /‚Çë j))
    _               = ext i z                          := by simp [ediv_add_remainder]

def Exp.Seq‚ÇÄ (X Y : M) : Prop := ext 4 X = 1 ‚àß ext 4 Y = 2

def Exp.Seq‚Çõ.Even (X Y u : M) : Prop := ext (u^2) X = 2 * ext u X ‚àß ext (u^2) Y = (ext u Y)^2

def Exp.Seq‚Çõ.Odd (X Y u : M) : Prop := ext (u^2) X = 2 * ext u X + 1 ‚àß ext (u^2) Y = 2 * (ext u Y)^2

def Exp.Seq‚Çõ (y X Y : M) : Prop := ‚àÄ u ‚â§ y, u ‚â† 2 ‚Üí PPow2 u ‚Üí Seq‚Çõ.Even X Y u ‚à® Seq‚Çõ.Odd X Y u

def Exp.Seq‚Çò (x y X Y : M) : Prop := ‚àÉ u ‚â§ y^2, u ‚â† 2 ‚àß PPow2 u ‚àß ext u X = x ‚àß ext u Y = y

def Exp (x y : M) : Prop := (x = 0 ‚àß y = 1) ‚à® ‚àÉ X ‚â§ y^4, ‚àÉ Y ‚â§ y^4, Exp.Seq‚ÇÄ X Y ‚àß Exp.Seq‚Çõ y X Y ‚àß Exp.Seq‚Çò x y X Y

lemma Exp.Seq‚Çõ.iff (y X Y : M) :
  Exp.Seq‚Çõ y X Y ‚Üî
  ‚àÄ u ‚â§ y, u ‚â† 2 ‚Üí PPow2 u ‚Üí
    ((‚àÉ ext_u_X ‚â§ X, ext_u_X = ext u X ‚àß 2 * ext_u_X = ext (u^2) X)     ‚àß (‚àÉ ext_u_Y ‚â§ Y, ext_u_Y = ext u Y ‚àß ext_u_Y^2 = ext (u^2) Y)) ‚à®
    ((‚àÉ ext_u_X ‚â§ X, ext_u_X = ext u X ‚àß 2 * ext_u_X + 1 = ext (u^2) X) ‚àß (‚àÉ ext_u_Y ‚â§ Y, ext_u_Y = ext u Y ‚àß 2 * ext_u_Y^2 = ext (u^2) Y)) :=
  ‚ü®by intro H u hu ne2 ppu
      rcases H u hu ne2 ppu with (H | H)
      ¬∑ exact Or.inl ‚ü®‚ü®ext u X, by simp [H.1]‚ü©, ‚ü®ext u Y, by simp [H.2]‚ü©‚ü©
      ¬∑ exact Or.inr ‚ü®‚ü®ext u X, by simp [H.1]‚ü©, ‚ü®ext u Y, by simp [H.2]‚ü©‚ü©,
   by intro H u hu ne2 ppu
      rcases H u hu ne2 ppu with (‚ü®‚ü®_, _, rfl, hx‚ü©, ‚ü®_, _, rfl, hy‚ü©‚ü© | ‚ü®‚ü®_, _, rfl, hx‚ü©, ‚ü®_, _, rfl, hy‚ü©‚ü©)
      ¬∑ exact Or.inl ‚ü®by simp [hx, hy], by simp [hx, hy]‚ü©
      ¬∑ exact Or.inr ‚ü®by simp [hx, hy], by simp [hx, hy]‚ü©‚ü©

def Exp.Seq‚Çõ.def : Œ£·¥¨[0] 3 := ‚ü®
  ‚Äú‚àÄ[#0 < #1 + 1](#0 ‚â† 2 ‚Üí !ppow2def [#0] ‚Üí
    ( ‚àÉ[#0 < #3 + 1] (!extdef [#0, #1, #3] ‚àß !extdef [2 * #0, #1 * #1, #3]) ‚àß
      ‚àÉ[#0 < #4 + 1] (!extdef [#0, #1, #4] ‚àß !extdef [#0 * #0, #1 * #1, #4]) ) ‚à®
    ( ‚àÉ[#0 < #3 + 1] (!extdef [#0, #1, #3] ‚àß !extdef [2 * #0 + 1, #1 * #1, #3]) ‚àß
      ‚àÉ[#0 < #4 + 1] (!extdef [#0, #1, #4] ‚àß !extdef [2 * (#0 * #0), #1 * #1, #4])))‚Äù, by simp‚ü©

lemma Exp.Seq‚Çõ.defined : Œ£·¥¨[0]-Relation‚ÇÉ (Exp.Seq‚Çõ : M ‚Üí M ‚Üí M ‚Üí Prop) Exp.Seq‚Çõ.def := by
  intro v; simp [Exp.Seq‚Çõ.iff, Exp.Seq‚Çõ.def, ppow2_defined.pval, ext_defined.pval, ‚Üêle_iff_lt_succ, sq]

lemma Exp.graph_iff (x y : M) :
    Exp x y ‚Üî
    (x = 0 ‚àß y = 1) ‚à® ‚àÉ X ‚â§ y^4, ‚àÉ Y ‚â§ y^4,
      (1 = ext 4 X ‚àß 2 = ext 4 Y) ‚àß
      Exp.Seq‚Çõ y X Y ‚àß
      (‚àÉ u ‚â§ y^2, u ‚â† 2 ‚àß PPow2 u ‚àß x = ext u X ‚àß y = ext u Y) :=
  ‚ü®by rintro (H | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, hY‚ü©‚ü©)
      ¬∑ exact Or.inl H
      ¬∑ exact Or.inr ‚ü®X, bX, Y, bY, ‚ü®H‚ÇÄ.1.symm, H‚ÇÄ.2.symm‚ü©, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX.symm, hY.symm‚ü©‚ü©,
   by rintro (H | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, hY‚ü©‚ü©)
      ¬∑ exact Or.inl H
      ¬∑ exact Or.inr ‚ü®X, bX, Y, bY, ‚ü®H‚ÇÄ.1.symm, H‚ÇÄ.2.symm‚ü©, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX.symm, hY.symm‚ü©‚ü©‚ü©

def Exp.def : Œ£·¥¨[0] 2 := ‚ü®
  ‚Äú(#0 = 0 ‚àß #1 = 1) ‚à® (
    ‚àÉ[#0 < #2 * #2 * #2 * #2 + 1] ‚àÉ[#0 < #3 * #3 * #3 * #3 + 1] (
      (!extdef [1, 4, #1] ‚àß !extdef [2, 4, #0]) ‚àß
      !Exp.Seq‚Çõ.def [#3, #1, #0] ‚àß
      ‚àÉ[#0 < #4 * #4 + 1] (#0 ‚â† 2 ‚àß !ppow2def [#0] ‚àß !extdef [#3, #0, #2] ‚àß!extdef [#4, #0, #1])))‚Äù, by { simp }‚ü©

lemma Exp.defined : Œ£·¥¨[0]-Relation (Exp : M ‚Üí M ‚Üí Prop) Exp.def := by
  intro v; simp [Exp.graph_iff, Exp.def, ppow2_defined.pval, ext_defined.pval, Exp.Seq‚Çõ.defined.pval, ‚Üêle_iff_lt_succ, pow_four, sq]

namespace Exp

def seqX‚ÇÄ : M := 4

def seqY‚ÇÄ : M := 2 * 4

lemma one_lt_four : (1 : M) < 4 := by
  rw [‚Üêthree_add_one_eq_four]
  exact lt_add_of_pos_left 1 three_pos

lemma two_lt_three : (2 : M) < 3 := by rw [‚Üêtwo_add_one_eq_three]; exact lt_add_one 2

lemma three_lt_four : (3 : M) < 4 := by rw [‚Üêthree_add_one_eq_four]; exact lt_add_one 3

lemma two_lt_four : (2 : M) < 4 := lt_trans _ _ _ two_lt_three three_lt_four

lemma seq‚ÇÄ_zero_two : Seq‚ÇÄ (seqX‚ÇÄ : M) (seqY‚ÇÄ : M) := by simp [seqX‚ÇÄ, seqY‚ÇÄ, Seq‚ÇÄ, ext, one_lt_four, two_lt_four]

lemma Seq‚ÇÄ.rem {X Y i : M} (h : Seq‚ÇÄ X Y) (ppi : PPow2 i) (hi : 4 < i) :
    Seq‚ÇÄ (X mod i) (Y mod i) := by
  rw [Seq‚ÇÄ, ext_rem, ext_rem] <;> try simp [ppi, hi]
  exact h

lemma Seq‚Çõ.rem {y y' X Y i : M} (h : Seq‚Çõ y X Y) (ppi : PPow2 i) (hi : y'^2 < i) (hy : y' ‚â§ y) :
    Seq‚Çõ y' (X mod i) (Y mod i) := by
  intro j hj ne2 ppj
  have : j^2 < i := lt_of_le_of_lt (sq_le_sq_iff.mp hj) hi
  have : j < i := lt_of_le_of_lt (le_trans hj $ by simp) hi
  rcases h j (le_trans hj hy) ne2 ppj with (H | H)
  ¬∑ left; simpa [Seq‚Çõ.Even, ext_rem, ppj, ppj.sq, ppi, *] using H
  ¬∑ right; simpa [Seq‚Çõ.Odd, ext_rem, ppj, ppj.sq, ppi, *] using H

lemma seq‚Çõ_one_zero_two : Seq‚Çõ (1 : M) (seqX‚ÇÄ : M) (seqY‚ÇÄ : M) := by
  intro u leu; rcases le_one_iff_eq_zero_or_one.mp leu with (rfl | rfl) <;> simp

def append (i X z : M) : M := (X mod i) + z * i

lemma append_lt (i X : M) {z} (hz : z < i) : append i X z < i^2 := calc
  append i X z = (X mod i) + z * i := rfl
  _            < (1 + z) * i       := by simp [add_mul]; exact remainder_lt _ (pos_of_gt hz)
  _            ‚â§ i^2               := by simp [sq, add_comm]; exact mul_le_mul_of_nonneg_right (lt_iff_succ_le.mp hz) (by simp)

lemma ext_append_last (i X : M) {z} (hz : z < i) :
    ext i (append i X z) = z := by
  simp [ext, append, ediv_add_mul_self, show 0 < i from pos_of_gt hz, hz]

lemma ext_append_of_lt {i j : M} (hi : PPow2 i) (hj : PPow2 j) (hij : i < j) (X z : M) :
    ext i (append j X z) = ext i X := by
  have : i^2 ‚à£ j := Pow2.dvd_of_le hi.pow2.sq hj.pow2 (PPow2.sq_le_of_lt hi hj hij)
  calc
    ext i (append j X z) = ext i ((X mod j) + z * j)        := rfl
    _                    = ext i (X mod j)                  := ext_add_of_dvd_sq_right hi.pos (Dvd.dvd.mul_left this z)
    _                    = ext i (j * (X /‚Çë j) + (X mod j)) := by rw [add_comm]
                                                                  refine Eq.symm <| ext_add_of_dvd_sq_right hi.pos (Dvd.dvd.mul_right this _)
    _                    = ext i X                          := by simp [ediv_add_remainder]

lemma Seq‚ÇÄ.append {X Y i x y : M} (H : Seq‚ÇÄ X Y) (ppi : PPow2 i) (hi : 4 < i) :
    Seq‚ÇÄ (append i X x) (append i Y y) := by
  rw [Seq‚ÇÄ, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi, hi]
  exact H

lemma Seq‚Çõ.append {z x y X Y i : M} (h : Seq‚Çõ z X Y) (ppi : PPow2 i) (hz : z < i) :
    Seq‚Çõ z (append (i^2) X x) (append (i^2) Y y) := by
  intro j hj ne2 ppj
  have : j < i^2 := lt_of_lt_of_le (lt_of_le_of_lt hj hz) (by simp)
  have : j^2 < i^2 := sq_lt_sq_iff.mp (lt_of_le_of_lt hj hz)
  rcases h j hj ne2 ppj with (H | H) <;> simp [Even, Odd]
  ¬∑ left; rw [ext_append_of_lt, ext_append_of_lt, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi.sq, ppj.sq, *]
    exact H
  ¬∑ right; rw [ext_append_of_lt, ext_append_of_lt, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi.sq, ppj.sq, *]
    exact H

@[simp] lemma exp_zero_one : Exp (0 : M) 1 := Or.inl (by simp)

lemma pow_three (x : M) : x^3 = x * x * x := by simp [‚Üê two_add_one_eq_three, pow_add, sq]

lemma pow_four (x : M) : x^4 = x * x * x * x := by simp [‚Üê three_add_one_eq_four, pow_add, pow_three]

lemma pow_four_eq_sq_sq (x : M) : x^4 = (x^2)^2 := by simp [pow_four, sq, mul_assoc]

@[simp] lemma exp_one_two : Exp (1 : M) 2 :=
  Or.inr ‚ü®
    4, by simp [pow_four_eq_sq_sq, two_pow_two_eq_four],
    2 * 4, by simp [pow_four_eq_sq_sq, two_pow_two_eq_four, sq (4 : M)]; exact le_of_lt two_lt_four,
    by simp [Seq‚ÇÄ, ext, one_lt_four, two_lt_four],
    by simp [Seq‚Çõ]; intro i hi ne2 ppi; exact False.elim <| not_le.mpr (ppi.two_lt ne2) hi,
    ‚ü®4, by simp [two_pow_two_eq_four], by simp, by simp [ext, one_lt_four, two_lt_four]‚ü©‚ü©

lemma pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : Pow2 (ext i Y) := by
  refine hierarchy_order_induction‚ÇÇ M Œ£ 0 (fun y Y i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí Pow2 (ext i Y))
    ‚ü®‚ü®‚Äú#2 ‚â† 2 ‚Üí #2 ‚â§ #0 * #0 ‚Üí !ppow2def [#2] ‚Üí ‚àÉ[#0 < #2 + 1] (!extdef [#0, #3, #2] ‚àß !pow2def [#0])‚Äù, by simp‚ü©,
     by intro v
        simp [sq, Semiformula.eval_substs, pow2_defined.pval, ppow2_defined.pval, ext_defined.pval]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 2) (v 1), by simp [‚Üê le_iff_lt_succ, h]‚ü©,
          by rintro ‚ü®x, _, rfl, h‚ü©; exact h‚ü©‚ü© y Y ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ei : i = 4
  ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2]
  ¬∑ have ppsq : Pow2 (ext (‚àöi) Y) :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
      simp [this, ppsq]
    ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
      simp [this, ppsq]

lemma range_pow2 {x y : M} (h : Exp x y) : Pow2 y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ exact pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

lemma le_sq_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : i ‚â§ (ext i Y)^2 := by
  refine hierarchy_order_induction‚ÇÇ M Œ£ 0 (fun y Y i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí i ‚â§ (ext i Y)^2)
    ‚ü®‚ü®‚Äú#2 ‚â† 2 ‚Üí #2 ‚â§ #0 * #0 ‚Üí !ppow2def [#2] ‚Üí ‚àÉ[#0 < #2 + 1] (!extdef [#0, #3, #2] ‚àß #3 ‚â§ #0 * #0)‚Äù, by simp‚ü©,
     by intro v
        simp [sq, Semiformula.eval_substs, pow2_defined.pval, ppow2_defined.pval, ext_defined.pval]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 2) (v 1), by simp [‚Üê le_iff_lt_succ, h]‚ü©,
          by rintro ‚ü®x, _, rfl, h‚ü©; exact h‚ü©‚ü© y Y ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ei : i = 4
  ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2, two_pow_two_eq_four]
  ¬∑ have IH : ‚àöi ‚â§ (ext (‚àöi) Y)^2 :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
      have : ‚àöi ‚â§ ext i Y := by simpa [this] using IH
      simpa [ppi.sq_sqrt_eq ne2] using sq_le_sq_iff.mp this
    ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
      have : 2 * ‚àöi ‚â§ ext i Y := by simpa [this] using mul_le_mul_left (a := 2) IH
      have : ‚àöi ‚â§ ext i Y := le_trans (le_mul_of_pos_left $ by simp) this
      simpa [ppi.sq_sqrt_eq ne2] using sq_le_sq_iff.mp this

example {a b c : ‚Ñï} : a * (b * c) = b * (a * c) := by exact Nat.mul_left_comm a b c

lemma two_mul_ext_le_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 2 * ext i Y ‚â§ i := by
  refine hierarchy_order_induction‚ÇÇ M Œ£ 0 (fun y Y i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí 2 * (ext i Y) ‚â§ i)
    ‚ü®‚ü®‚Äú#2 ‚â† 2 ‚Üí #2 ‚â§ #0 * #0 ‚Üí !ppow2def [#2] ‚Üí ‚àÉ[#0 < #2 + 1] (!extdef [#0, #3, #2] ‚àß 2 * #0 ‚â§ #3)‚Äù, by simp‚ü©,
     by intro v
        simp [sq, Semiformula.eval_substs, pow2_defined.pval, ppow2_defined.pval, ext_defined.pval]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 2) (v 1), by simp [‚Üê le_iff_lt_succ, h]‚ü©,
          by rintro ‚ü®x, _, rfl, h‚ü©; exact h‚ü©‚ü© y Y ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ei : i = 4
  ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2, two_mul_two_eq_four]
  ¬∑ have IH : 2 * ext (‚àöi) Y ‚â§ ‚àöi :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
      calc
        2 * ext i Y ‚â§ 2 * (2 * ext i Y)  := le_mul_of_pos_left (by simp)
        _           = (2 * ext (‚àöi) Y)^2 := by simp [this, sq, mul_left_comm, mul_assoc]
        _           ‚â§ (‚àöi)^2             := sq_le_sq_iff.mp IH
        _           = i                  := ppi.sq_sqrt_eq ne2
    ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
      calc
        2 * ext i Y = (2 * ext (‚àöi) Y)^2 := by simp [this, sq, mul_left_comm, mul_assoc]
        _           ‚â§ (‚àöi)^2             := sq_le_sq_iff.mp IH
        _           = i                  := ppi.sq_sqrt_eq ne2

lemma exp_exists_sq_of_exp_even {x y : M} : Exp (2 * x) y ‚Üí ‚àÉ y', y = y'^2 ‚àß Exp x y' := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ exact ‚ü®1, by simp [show x = 0 from by simpa using hx]‚ü©
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl
    have ex : 1 = 2 * x := by simpa [hseq‚ÇÄ.1] using hXx
    have : (2 : M) ‚à£ 1 := by rw [ex]; simp
    have : ¬¨(2 : M) ‚à£ 1 := not_dvd_of_lt (by simp) one_lt_two
    contradiction
  have : Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) :=
    hseq‚Çõ (‚àöi) (sqrt_le_of_le_sq hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2)
  rcases this with (‚ü®hXi, hYi‚ü© | ‚ü®hXi, _‚ü©)
  ¬∑ have hXx : x = ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have hYy : y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2, hYy] using hYi
    let X' := X mod i
    let Y' := Y mod i
    have bX' : X' ‚â§ (ext (‚àöi) Y)^4 := by simp [pow_four_eq_sq_sq, ‚ÜêhYy]; exact le_trans (le_of_lt $ by simp [ppi.pos]) hi
    have bY' : Y' ‚â§ (ext (‚àöi) Y)^4 := by simp [pow_four_eq_sq_sq, ‚ÜêhYy]; exact le_trans (le_of_lt $ by simp [ppi.pos]) hi
    have hseq‚Çõ' : Seq‚Çõ (ext (‚àöi) Y) X' Y' :=
      hseq‚Çõ.rem ppi (sq_lt_of_lt_sqrt $ ext_lt Y (ppi.sqrt ne2).pos) (by simp [hYy])
    have hseq‚Çò' : Seq‚Çò x (ext (‚àöi) Y) X' Y' :=
      ‚ü®‚àöi, sqrt_le_of_le_sq $ by simp [‚ÜêhYy, hi], ppi.sqrt_ne_two ne2 ne4, ppi.sqrt ne2,
       by have : ‚àöi < i := sqrt_lt_self_of_one_lt ppi.one_lt
          simp [this, ext_rem, ppi, ppi.sqrt ne2, hXx]‚ü©
    have : Exp x (ext (‚àöi) Y) :=
      Or.inr ‚ü®X', bX', Y', bY', hseq‚ÇÄ.rem ppi (ppi.four_lt ne2 ne4), hseq‚Çõ', hseq‚Çò'‚ü©
    exact ‚ü®ext (‚àöi) Y, hYy, this‚ü©
  ¬∑ have : 2 ‚à£ ext i X := by simp [hXx]
    have : ¬¨2 ‚à£ ext i X := by
      simp [show ext i X = 2 * ext (‚àöi) X + 1 from by simpa [ppi.sq_sqrt_eq ne2] using hXi,
        ‚Üêremainder_eq_zero_iff_dvd, one_lt_two]
    contradiction

lemma bit_zero {x y : M} : Exp x y ‚Üí Exp (2 * x) (y ^ 2) := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ rcases hx with rfl; simp
  have hxsqi : 2 * x < i ^ 2 := lt_of_lt_of_le (by simp [‚ÜêhXx, ppi.pos]) (two_mul_le_sq ppi.two_le)
  have hysqi : y ^ 2 < i ^ 2 := sq_lt_sq_iff.mp $ by simp [‚ÜêhYy, ppi.pos]
  have hiisq : i < i^2 := lt_square_of_lt ppi.one_lt
  let X' := append (i^2) X (2 * x)
  let Y' := append (i^2) Y (y ^ 2)
  have bX' : X' ‚â§ (y^2)^4 := by
    have : X' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) X hxsqi
    exact le_trans (le_of_lt this) (pow_le_pow_left (by simp) hi 4)
  have bY' : Y' ‚â§ (y^2)^4 := by
    have : Y' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) Y hysqi
    exact le_trans (le_of_lt this) (pow_le_pow_left (by simp) hi 4)
  have hseq‚ÇÄ' : Seq‚ÇÄ X' Y' := hseq‚ÇÄ.append ppi.sq (ppi.sq.four_lt ppi.sq_ne_two (ppi.sq_ne_four ne2))
  have hseq‚Çõ' : Seq‚Çõ (y ^ 2) X' Y' := by
    intro j hj jne2 ppj
    by_cases hjy : j ‚â§ y
    ¬∑ have : Seq‚Çõ y X' Y' := hseq‚Çõ.append ppi (by simp [‚ÜêhYy, ppi.pos])
      exact this j hjy jne2 ppj
    ¬∑ have : i = j := by
        have : Pow2 y := by simpa [hYy] using pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
        exact PPow2.sq_uniq this ppi ppj
          ‚ü®by simp [‚ÜêhYy, ppi.pos], hi‚ü© ‚ü®by simpa using hjy, hj‚ü©
      rcases this with rfl
      left; simp [Seq‚Çõ.Even]
      rw [ext_append_last, ext_append_last, ext_append_of_lt , ext_append_of_lt] <;>
        simp [ppi, ppi.sq, hxsqi, hysqi, hiisq, hXx, hYy]
  have hseq‚Çò' : Seq‚Çò (2 * x) (y ^ 2) X' Y' :=
    ‚ü®i ^ 2, sq_le_sq_iff.mp hi, ppi.sq_ne_two, ppi.sq,
     by simp; rw [ext_append_last, ext_append_last] <;> try simp [hxsqi, hysqi]‚ü©
  exact Or.inr <| ‚ü®X', bX', Y', bY', hseq‚ÇÄ', hseq‚Çõ', hseq‚Çò'‚ü©

lemma exp_even {x y : M} : Exp (2 * x) y ‚Üî ‚àÉ y', y = y'^2 ‚àß Exp x y' :=
  ‚ü®exp_exists_sq_of_exp_even, by rintro ‚ü®y, rfl, h‚ü©; exact bit_zero h‚ü©

lemma exp_even_sq {x y : M} : Exp (2 * x) (y ^ 2) ‚Üî Exp x y :=
  ‚ü®by intro h
      rcases exp_exists_sq_of_exp_even h with ‚ü®y', e, h‚ü©
      simpa [show y = y' from by simpa using e] using h,
   bit_zero‚ü©

lemma exp_exists_sq_of_exp_odd {x y : M} : Exp (2 * x + 1) y ‚Üí ‚àÉ y', y = 2 * y'^2 ‚àß Exp x y' := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ simp at hx
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl
    have ex : x = 0 := by simpa [hseq‚ÇÄ.1] using hXx
    have ey : y = 2 := by simpa [hseq‚ÇÄ.2] using Eq.symm hYy
    exact ‚ü®1, by simp [ex, ey]‚ü©
  have : Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) :=
    hseq‚Çõ (‚àöi) (sqrt_le_of_le_sq hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2)
  rcases this with (‚ü®hXi, _‚ü© | ‚ü®hXi, hYi‚ü©)
  ¬∑ have hXx : 2 * x + 1 = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have : 2 ‚à£ 2 * x + 1 := by rw [hXx]; simp
    have : ¬¨2 ‚à£ 2 * x + 1 := by simp [‚Üêremainder_eq_zero_iff_dvd, one_lt_two]
    contradiction
  ¬∑ have hXx : x = ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have hYy : y = 2 * (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2, hYy] using hYi
    let X' := X mod i
    let Y' := Y mod i
    have bsqi : ‚àöi ‚â§ (ext (‚àöi) Y)^2 := le_sq_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
    have bi : i ‚â§ ext (‚àöi) Y^4 := by simpa [pow_four_eq_sq_sq, ppi.sq_sqrt_eq ne2] using sq_le_sq_iff.mp bsqi
    have bX' : X' ‚â§ (ext (‚àöi) Y)^4 := le_trans (le_of_lt $ by simp [ppi.pos]) bi
    have bY' : Y' ‚â§ (ext (‚àöi) Y)^4 := le_trans (le_of_lt $ by simp [ppi.pos]) bi
    have hseq‚Çõ' : Seq‚Çõ (ext (‚àöi) Y) X' Y' :=
      hseq‚Çõ.rem ppi (sq_lt_of_lt_sqrt $ ext_lt Y (ppi.sqrt ne2).pos) (le_trans (le_sq _)
        (by simp [hYy]))
    have hseq‚Çò' : Seq‚Çò x (ext (‚àöi) Y) X' Y' :=
      ‚ü®‚àöi, bsqi, ppi.sqrt_ne_two ne2 ne4, ppi.sqrt ne2,
       by have : ‚àöi < i := sqrt_lt_self_of_one_lt ppi.one_lt
          simp [this, ext_rem, ppi, ppi.sqrt ne2, hXx]‚ü©
    have : Exp x (ext (‚àöi) Y) :=
      Or.inr ‚ü®X', bX', Y', bY', hseq‚ÇÄ.rem ppi (ppi.four_lt ne2 ne4), hseq‚Çõ', hseq‚Çò'‚ü©
    exact ‚ü®ext (‚àöi) Y, hYy, this‚ü©

lemma bit_one {x y : M} : Exp x y ‚Üí Exp (2 * x + 1) (2 * y ^ 2) := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ rcases hx with rfl; simp
  have hxsqi : 2 * x + 1 < i ^ 2 := calc
    2 * x + 1 < 2 * i + 1 := by simp [‚ÜêhXx, ppi.pos]
    _         ‚â§ i ^ 2     := lt_iff_succ_le.mp (two_mul_lt_sq $ ppi.two_lt ne2)
  have hysqi : 2 * y ^ 2 < i ^ 2 := by
    have : 2 * ext i Y ‚â§ i := two_mul_ext_le_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
    suffices : 2 * (2 * y ^ 2) < 2 * i ^ 2
    ¬∑ exact lt_of_mul_lt_mul_left this
    calc
      2 * (2 * y ^ 2) = (2 * y)^2 := by simp [sq, mul_assoc, mul_left_comm y 2]
      _               ‚â§ i^2       := sq_le_sq_iff.mp (by simpa [hYy] using this)
      _               < 2 * i^2   := lt_mul_of_one_lt_left ppi.sq.pos one_lt_two
  have hiisq : i < i^2 := lt_square_of_lt ppi.one_lt
  let X' := append (i^2) X (2 * x + 1)
  let Y' := append (i^2) Y (2 * (y^2))
  have bX' : X' ‚â§ (2 * y ^ 2)^4 := by
    have : X' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) X hxsqi
    exact le_trans (le_of_lt this) (pow_le_pow_left (by simp) (le_trans hi $ by simp) 4)
  have bY' : Y' ‚â§ (2 * y ^ 2)^4 := by
    have : Y' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) Y hysqi
    exact le_trans (le_of_lt this) (pow_le_pow_left (by simp) (le_trans hi $ by simp) 4)
  have hseq‚ÇÄ' : Seq‚ÇÄ X' Y' := hseq‚ÇÄ.append ppi.sq (ppi.sq.four_lt ppi.sq_ne_two (ppi.sq_ne_four ne2))
  have hseq‚Çõ' : Seq‚Çõ (2 * y ^ 2) X' Y' := by
    intro j hj jne2 ppj
    by_cases hjy : j ‚â§ y
    ¬∑ have : Seq‚Çõ y X' Y' := hseq‚Çõ.append ppi (by simp [‚ÜêhYy, ppi.pos])
      exact this j hjy jne2 ppj
    ¬∑ have : i = j := by
        have : Pow2 y := by simpa [hYy] using pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
        exact PPow2.two_mul_sq_uniq this ppi ppj
          ‚ü®by simp [‚ÜêhYy, ppi.pos], le_trans hi (by simp)‚ü© ‚ü®by simpa using hjy, hj‚ü©
      rcases this with rfl
      right; simp [Seq‚Çõ.Odd]
      rw [ext_append_last, ext_append_last, ext_append_of_lt , ext_append_of_lt] <;>
        simp [ppi, ppi.sq, hxsqi, hysqi, hiisq, hXx, hYy]
  have hseq‚Çò' : Seq‚Çò (2 * x + 1) (2 * y ^ 2) X' Y' :=
    ‚ü®i ^ 2, sq_le_sq_iff.mp (le_trans hi $ by simp), ppi.sq_ne_two, ppi.sq,
     by simp; rw [ext_append_last, ext_append_last] <;> try simp [hxsqi, hysqi]‚ü©
  exact Or.inr <| ‚ü®X', bX', Y', bY', hseq‚ÇÄ', hseq‚Çõ', hseq‚Çò'‚ü©

lemma exp_odd {x y : M} : Exp (2 * x + 1) y ‚Üî ‚àÉ y', y = 2 * y' ^ 2 ‚àß Exp x y' :=
  ‚ü®exp_exists_sq_of_exp_odd, by rintro ‚ü®y, rfl, h‚ü©; exact bit_one h‚ü©

lemma exp_odd_two_mul_sq {x y : M} : Exp (2 * x + 1) (2 * y ^ 2) ‚Üî Exp x y :=
  ‚ü®by intro h
      rcases exp_exists_sq_of_exp_odd h with ‚ü®y', e, h‚ü©
      simpa [show y = y' from by simpa using e] using h,
   bit_one‚ü©

lemma two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 2 ‚â§ ext i Y := by
  refine hierarchy_order_induction‚ÇÇ M Œ£ 0 (fun y Y i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí 2 ‚â§ ext i Y)
    ‚ü®‚ü®‚Äú#2 ‚â† 2 ‚Üí #2 ‚â§ #0 * #0 ‚Üí !ppow2def [#2] ‚Üí ‚àÉ[#0 < #2 + 1] (!extdef [#0, #3, #2] ‚àß 2 ‚â§ #0)‚Äù, by simp‚ü©,
     by intro v
        simp [sq, ppow2_defined.pval, ext_defined.pval]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 2) (v 1), by simp [‚Üê le_iff_lt_succ, h]‚ü©,
          by rintro ‚ü®x, _, rfl, h‚ü©; exact h‚ü©‚ü© y Y ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ei : i = 4
  ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2]
  ¬∑ have IH : 2 ‚â§ ext (‚àöi) Y :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ calc
        2 ‚â§ ext (‚àöi) Y     := IH
        _ ‚â§ (ext (‚àöi) Y)^2 := by simp
        _ = ext i Y        := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm heven.2
    ¬∑ calc
        2 ‚â§ ext (‚àöi) Y         := IH
        _ ‚â§ (ext (‚àöi) Y)^2     := by simp
        _ ‚â§ 2 * (ext (‚àöi) Y)^2 := by simp
        _ = ext i Y            := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm hodd.2

lemma ext_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : ext i X < ext i Y := by
  refine hierarchy_order_induction‚ÇÉ M Œ£ 0 (fun y X Y i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí ext i X < ext i Y)
    ‚ü®‚ü®‚Äú#3 ‚â† 2 ‚Üí #3 ‚â§ #0 * #0 ‚Üí !ppow2def [#3] ‚Üí
        ‚àÉ[#0 < #2 + 1] (!extdef [#0, #4, #2] ‚àß ‚àÉ[#0 < #4 + 1] (!extdef [#0, #5, #4] ‚àß #1 < #0))‚Äù, by simp‚ü©,
     by intro v
        simp [sq, Semiformula.eval_substs, ppow2_defined.pval, ext_defined.pval, ‚Üêle_iff_lt_succ]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 3) (v 1), by simp, rfl, ext (v 3) (v 2), by simp, rfl, h‚ü©,
          by rintro ‚ü®x, _, rfl, _, _, rfl, h‚ü©; exact h‚ü©‚ü© y X Y ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl; simp [h‚ÇÄ.1, h‚ÇÄ.2, one_lt_two]
  ¬∑ have IH : ext (‚àöi) X < ext (‚àöi) Y :=
    IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ calc
        ext i X = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2] using heven.1
        _       < 2 * ext (‚àöi) Y := by simpa using IH
        _       ‚â§ ext (‚àöi) Y^2   := two_mul_le_sq (two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ h‚ÇÄ h‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2))
        _       = ext i Y        := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm heven.2
    ¬∑ calc
        ext i X = 2 * ext (‚àöi) X + 1 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.1
        _       < 2 * ext (‚àöi) Y + 1 := by simpa using IH
        _       ‚â§ 2 * ext (‚àöi) Y^2   := lt_iff_succ_le.mp
          (by simp [sq]; exact lt_mul_self (lt_iff_succ_le.mpr $ by
                simp [one_add_one_eq_two]; exact (two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ h‚ÇÄ h‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2))))
        _       = ext i Y            := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm hodd.2

lemma range_pos {x y : M} (h : Exp x y) : 0 < y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ have : 2 ‚â§ ext u Y := two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu
    exact lt_of_lt_of_le (by simp) this

lemma dom_lt_range {x y : M} (h : Exp x y) : x < y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ exact ext_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

lemma not_exp_of_le {x y : M} (h : x ‚â§ y) : ¬¨Exp y x := by
  intro hxy; exact not_le.mpr (dom_lt_range hxy) h

@[simp] lemma one_not_even (a : M) : 1 ‚â† 2 * a := by
  intro h
  have : (2 : M) ‚à£ 1 := by rw [h]; simp
  have : ¬¨(2 : M) ‚à£ 1 := not_dvd_of_lt (by simp) one_lt_two
  contradiction

@[simp] lemma exp_two_four : Exp (2 : M) 4 := by
  simpa [two_pow_two_eq_four] using (show Exp (1 : M) 2 from by simp).bit_zero

lemma exp_succ {x y : M} : Exp (x + 1) y ‚Üî ‚àÉ z, y = 2 * z ‚àß Exp x z := by
  suffices : x < y ‚Üí (Exp (x + 1) y ‚Üî ‚àÉ z ‚â§ y, y = 2 * z ‚àß Exp x z)
  ¬∑ by_cases hxy : x < y
    ¬∑ simp [this hxy]
      exact ‚ü®by rintro ‚ü®z, _, rfl, hz‚ü©; exact ‚ü®z, rfl, hz‚ü©,
             by rintro ‚ü®z, rfl, hz‚ü©; exact ‚ü®z, by simpa using hz‚ü©‚ü©
    ¬∑ simp [not_exp_of_le (show y ‚â§ x + 1 from le_add_right (by simpa using hxy))]
      rintro z rfl
      exact not_exp_of_le (le_trans le_two_mul_left $  by simpa using hxy)
  ¬∑ refine hierarchy_order_induction‚ÇÄ M Œ£ 0 (fun y ‚Ü¶ ‚àÄ x < y, (Exp (x + 1) y ‚Üî ‚àÉ z ‚â§ y, y = 2 * z ‚àß Exp x z))
      ‚ü®‚ü®‚Äú‚àÄ[#0 < #1] (!Exp.def [#0 + 1, #1] ‚Üî ‚àÉ[#0 < #2 + 1] (#2 = 2 * #0 ‚àß !Exp.def [#1, #0]))‚Äù,
         by simp [Hierarchy.pi_zero_iff_sigma_zero]‚ü©,
       by intro v
          simp [sq, Semiformula.eval_substs, Exp.defined.pval, ‚Üêle_iff_lt_succ]‚ü© ?_ y x
    simp; intro y IH x hxy
    rcases even_or_odd x with ‚ü®x, (rfl | rfl)‚ü©
    ¬∑ constructor
      ¬∑ intro H
        rcases exp_odd.mp H with ‚ü®y, rfl, H'‚ü©
        exact ‚ü®y^2, by simp, rfl, H'.bit_zero‚ü©
      ¬∑ rintro ‚ü®y, hy, rfl, H‚ü©
        rcases exp_even.mp H with ‚ü®y, rfl, H'‚ü©
        exact H'.bit_one
    ¬∑ constructor
      ¬∑ intro H
        have : Exp (2 * (x + 1)) y := by simpa [mul_add, add_assoc, one_add_one_eq_two] using H
        rcases exp_even.mp this with ‚ü®y, rfl, H'‚ü©
        have : 1 < y := by
          simpa using (show 1 < y^2 from lt_of_le_of_lt (by simp) hxy)
        have : Exp (x + 1) y ‚Üî ‚àÉ z ‚â§ y, y = 2 * z ‚àß Exp x z :=
          IH y (lt_square_of_lt $ this) x (lt_trans _ _ _ (by simp) H'.dom_lt_range)
        rcases this.mp H' with ‚ü®y, _, rfl, H''‚ü©
        exact ‚ü®2 * y ^ 2, by simp [sq, mul_assoc, mul_left_comm y 2],
          by simp [sq, mul_assoc, mul_left_comm y 2], H''.bit_one‚ü©
      ¬∑ rintro ‚ü®y, _, rfl, H‚ü©
        rcases exp_odd.mp H with ‚ü®y, rfl, H'‚ü©
        by_cases ne1 : y = 1
        ¬∑ rcases ne1 with rfl
          rcases (show x = 0 from by simpa using H'.dom_lt_range)
          simp [one_add_one_eq_two, two_mul_two_eq_four]
        have : y < y^2 := lt_square_of_lt $ one_lt_iff_two_le.mpr $ H'.range_pow2.two_le ne1
        have : Exp (x + 1) (2 * y) ‚Üî ‚àÉ z ‚â§ 2 * y, 2 * y = 2 * z ‚àß Exp x z :=
          IH (2 * y) (by simp; exact lt_of_lt_of_le this le_two_mul_left) x
            (lt_of_lt_of_le H'.dom_lt_range $ by simp)
        have : Exp (x + 1) (2 * y) := this.mpr ‚ü®y, by simp, rfl, H'‚ü©
        simpa [sq, mul_add, add_assoc, mul_assoc, one_add_one_eq_two, mul_left_comm y 2] using this.bit_zero

lemma exp_succ_mul_two {x y : M} : Exp (x + 1) (2 * y) ‚Üî Exp x y :=
  ‚ü®by intro h; rcases exp_succ.mp h with ‚ü®y', e, h‚ü©; simpa [show y = y' from by simpa using e] using h,
   by intro h; exact exp_succ.mpr ‚ü®y, rfl, h‚ü©‚ü©

lemma one_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : M} (h‚ÇÄ : Exp.Seq‚ÇÄ X Y) (h‚Çõ : Exp.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 1 ‚â§ ext i X := by
  refine hierarchy_order_induction‚ÇÇ M Œ£ 0 (fun y X i ‚Ü¶ i ‚â† 2 ‚Üí i ‚â§ y^2 ‚Üí PPow2 i ‚Üí 1 ‚â§ ext i X)
    ‚ü®‚ü®‚Äú#2 ‚â† 2 ‚Üí #2 ‚â§ #0 * #0 ‚Üí !ppow2def [#2] ‚Üí
        ‚àÉ[#0 < #2 + 1] (!extdef [#0, #3, #2] ‚àß 1 ‚â§ #0)‚Äù, by simp‚ü©,
     by intro v
        simp [sq, ppow2_defined.pval, ext_defined.pval, ‚Üêle_iff_lt_succ]
        apply imp_congr_right; intro _; apply imp_congr_right; intro _; apply imp_congr_right; intro _
        exact ‚ü®fun h ‚Ü¶ ‚ü®ext (v 2) (v 1), by simp [h]‚ü©,
          by rintro ‚ü®_, _, rfl, h‚ü©; exact h‚ü©‚ü© y X ?_ i ne2 hi ppi
  simp; intro i IH ne2 hi ppi
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl; simp [h‚ÇÄ.1, h‚ÇÄ.2, one_lt_two]
  ¬∑ have IH : 1 ‚â§ ext (‚àöi) X :=
    IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
    rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
      h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2) with (heven | hodd)
    ¬∑ have : ext i X = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2] using heven.1
      exact le_trans IH (by simp [this])
    ¬∑ have : ext i X = 2 * ext (‚àöi) X + 1 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.1
      simp [this]

lemma zero_uniq {y : M} (h : Exp 0 y) : y = 1 := by
  rcases h with (‚ü®_, rfl‚ü© | ‚ü®X, _, Y, _, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, _‚ü©‚ü©)
  ¬∑ rfl
  ¬∑ have : 1 ‚â§ ext u X  := one_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu
    simp [hX] at this

lemma succ_lt_s {y : M} (h : Exp (x + 1) y) : 2 ‚â§ y := by
  rcases h with (‚ü®h, rfl‚ü© | ‚ü®X, _, Y, _, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, _, hY‚ü©‚ü©)
  ¬∑ simp at h
  ¬∑ simpa [hY] using two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

lemma zero_or_succ (a : M) : a = 0 ‚à® ‚àÉ a', a = a' + 1 := by
  rcases zero_le a with (rfl | pos)
  ¬∑ simp
  ¬∑ right; exact ‚ü®a ‚à∏ 1, by rw [msub_add_self_of_le]; simp [pos_iff_one_le.mp pos]‚ü©

protected lemma uniq {x y‚ÇÅ y‚ÇÇ : M} : Exp x y‚ÇÅ ‚Üí Exp x y‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ := by
  intro h‚ÇÅ h‚ÇÇ
  wlog h : y‚ÇÅ ‚â§ y‚ÇÇ
  ¬∑ exact Eq.symm <| this h‚ÇÇ h‚ÇÅ (show y‚ÇÇ ‚â§ y‚ÇÅ from le_of_not_ge h)
  refine hierarchy_order_induction‚ÇÄ M Œ£ 0 (fun y‚ÇÇ ‚Ü¶ ‚àÄ x < y‚ÇÇ, ‚àÄ y‚ÇÅ ‚â§ y‚ÇÇ, Exp x y‚ÇÅ ‚Üí Exp x y‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ)
    ‚ü®‚ü®‚Äú‚àÄ[#0 < #1] ‚àÄ[#0 < #2 + 1] (!Exp.def [#1, #0] ‚Üí !Exp.def [#1, #2] ‚Üí #0 = #2)‚Äù,
       by simp [Hierarchy.pi_zero_iff_sigma_zero]‚ü©,
     by intro v; simp [Exp.defined.pval, ‚Üêle_iff_lt_succ]‚ü©
    ?_ y‚ÇÇ x h‚ÇÇ.dom_lt_range y‚ÇÅ h h‚ÇÅ h‚ÇÇ
  simp; intro y‚ÇÇ H x _ y‚ÇÅ h h‚ÇÅ h‚ÇÇ
  rcases zero_or_succ x with (rfl | ‚ü®x, rfl‚ü©)
  ¬∑ simp [h‚ÇÅ.zero_uniq, h‚ÇÇ.zero_uniq]
  ¬∑ rcases exp_succ.mp h‚ÇÅ with ‚ü®y‚ÇÅ, rfl, h‚ÇÅ'‚ü©
    rcases exp_succ.mp h‚ÇÇ with ‚ü®y‚ÇÇ, rfl, h‚ÇÇ'‚ü©
    have : y‚ÇÅ = y‚ÇÇ := H y‚ÇÇ (lt_mul_of_pos_of_one_lt_left h‚ÇÇ'.range_pos one_lt_two)
      x h‚ÇÇ'.dom_lt_range y‚ÇÅ (by simpa using h) h‚ÇÅ' h‚ÇÇ'
    simp [this]

protected lemma inj {x‚ÇÅ x‚ÇÇ y : M} : Exp x‚ÇÅ y ‚Üí Exp x‚ÇÇ y ‚Üí x‚ÇÅ = x‚ÇÇ := by
  intro h‚ÇÅ h‚ÇÇ
  refine hierarchy_order_induction‚ÇÄ M Œ£ 0 (fun y ‚Ü¶ ‚àÄ x‚ÇÅ < y, ‚àÄ x‚ÇÇ < y, Exp x‚ÇÅ y ‚Üí Exp x‚ÇÇ y ‚Üí x‚ÇÅ = x‚ÇÇ)
    ‚ü®‚ü®‚Äú‚àÄ[#0 < #1] ‚àÄ[#0 < #2] (!Exp.def [#1, #2] ‚Üí !Exp.def [#0, #2] ‚Üí #1 = #0)‚Äù,
       by simp [Hierarchy.pi_zero_iff_sigma_zero]‚ü©,
     by intro v
        simp [sq, Semiformula.eval_substs, Exp.defined.pval, ‚Üêle_iff_lt_succ]‚ü©
    ?_ y x‚ÇÅ h‚ÇÅ.dom_lt_range x‚ÇÇ h‚ÇÇ.dom_lt_range h‚ÇÅ h‚ÇÇ
  simp; intro y H x‚ÇÅ _ x‚ÇÇ _ h‚ÇÅ h‚ÇÇ
  rcases zero_or_succ x‚ÇÅ with (rfl | ‚ü®x‚ÇÅ, rfl‚ü©) <;> rcases zero_or_succ x‚ÇÇ with (rfl | ‚ü®x‚ÇÇ, rfl‚ü©)
  ¬∑ rfl
  ¬∑ rcases h‚ÇÅ.zero_uniq
    rcases exp_succ.mp h‚ÇÇ with ‚ü®z, hz‚ü©
    simp at hz
  ¬∑ rcases h‚ÇÇ.zero_uniq
    rcases exp_succ.mp h‚ÇÅ with ‚ü®z, hz‚ü©
    simp at hz
  ¬∑ rcases exp_succ.mp h‚ÇÅ with ‚ü®y, rfl, hy‚ÇÅ‚ü©
    have hy‚ÇÇ : Exp x‚ÇÇ y := exp_succ_mul_two.mp h‚ÇÇ
    have : x‚ÇÅ = x‚ÇÇ :=
      H y (lt_mul_of_pos_of_one_lt_left hy‚ÇÅ.range_pos one_lt_two)
        x‚ÇÅ hy‚ÇÅ.dom_lt_range x‚ÇÇ hy‚ÇÇ.dom_lt_range hy‚ÇÅ hy‚ÇÇ
    simp [this]

end Exp

end ISigma‚ÇÄ

section ISigma‚ÇÅ

variable [ùêàùö∫‚ÇÅ.Mod M]

namespace Exp

lemma range_exists (x : M) : ‚àÉ y, Exp x y := by
  refine hierarchy_induction‚ÇÄ M Œ£ 1 (fun x ‚Ü¶ ‚àÉ y, Exp x y)
    ‚ü®‚ü®‚Äú‚àÉ !Exp.def [#1, #0]‚Äù, by simp [Hierarchy.pi_zero_iff_sigma_zero]‚ü©,
     by intro v; simp [Exp.defined.pval]‚ü©
    ?_ ?_ x
  ¬∑ exact ‚ü®1, by simp‚ü©
  ¬∑ simp; intro x y h; exact ‚ü®2 * y, exp_succ_mul_two.mpr h‚ü©

lemma range_exists_unique (x : M) : ‚àÉ! y, Exp x y := by
  rcases range_exists x with ‚ü®y, h‚ü©
  exact ExistsUnique.intro y h (by intro y' h'; exact h'.uniq h)

end Exp

def exponential (a : M) : M := Classical.choose! (Exp.range_exists_unique a)

prefix:max "exp " => exponential

section exponential

lemma exp_exponential (a : M) : Exp a (exp a) := Classical.choose!_spec (Exp.range_exists_unique a)

lemma exponential_graph {a b : M} : a = exp b ‚Üî Exp b a := Classical.choose!_eq_iff _

def expdef : Œ£·¥¨[0] 2 := ‚ü®‚Äú!Exp.def [#1, #0]‚Äù, by simp‚ü©

lemma exp_defined : Œ£·¥¨[0]-Function‚ÇÅ (exponential : M ‚Üí M) expdef := by
  intro v; simp [expdef, exponential_graph, Exp.defined.pval]

lemma exponential_of_exp {a b : M} (h : Exp a b) : exp a = b :=
  Eq.symm <| exponential_graph.mpr h

lemma exponential_inj : Function.Injective (exponential : M ‚Üí M) := Œª a _ H ‚Ü¶
  (exp_exponential a).inj (exponential_graph.mp H)

@[simp] lemma exp_zero : exp (0 : M) = 1 := exponential_of_exp (by simp)

@[simp] lemma exp_one : exp (1 : M) = 2 := exponential_of_exp (by simp)

lemma exp_succ (a : M) : exp (a + 1) = 2 * exp a :=
  exponential_of_exp <| Exp.exp_succ_mul_two.mpr <| exp_exponential a

lemma exp_even (a : M) : exp (2 * a) = (exp a)^2 :=
  exponential_of_exp <| Exp.exp_even_sq.mpr <| exp_exponential a

@[simp] lemma lt_exp (a : M) : a < exp a := (exp_exponential a).dom_lt_range

@[simp] lemma exp_pos (a : M) : 0 < exp a := (exp_exponential a).range_pos

@[simp] lemma exp_pow2 (a : M) : Pow2 (exp a) := (exp_exponential a).range_pow2

end exponential

def Bit (i a : M) : Prop := LenBit (exp i) a

infix:50 " ‚àà·µá " => Bit

notation:50 a:50 " ‚àâ·µá " b:50 => ¬¨ (a ‚àà·µá b)

def bitdef : Œ£·¥¨[0] 2 := ‚ü®‚Äú‚àÉ[#0 < #2 + 1] (!expdef [#0, #1] ‚àß !lenbitdef [#0, #2])‚Äù, by simp‚ü©

lemma bit_defined : Œ£·¥¨[0]-Relation (Bit : M ‚Üí M ‚Üí Prop) bitdef := by
  intro v; simp [bitdef, lenbit_defined.pval, exp_defined.pval, ‚Üêle_iff_lt_succ]
  constructor
  ¬∑ intro h; exact ‚ü®exp (v 0), by simp [h.le], rfl, h‚ü©
  ¬∑ rintro ‚ü®_, _, rfl, h‚ü©; exact h

namespace Bit

@[simp] lemma not_mem_zero (i : M) : i ‚àâ·µá 0 := by simp [Bit]

open Classical in
noncomputable def insert (i a : M) : M := if i ‚àà·µá a then a else a + exp i



end Bit

end ISigma‚ÇÅ

end Model

end

end Arith

end LO.FirstOrder
